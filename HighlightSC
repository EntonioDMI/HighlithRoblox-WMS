local TweenService = game:GetService("TweenService")

-- Check if the script has already been injected
if not _G.HighlightScriptInjected then
    -- Mark the script as injected
    _G.HighlightScriptInjected = true

    -- Get the local player
    local localPlayer = game.Players.LocalPlayer
    local mouse = localPlayer:GetMouse()
    local currentHover = nil

    -- Function to create a highlight
    local function createHighlight(character)
        local highlight = Instance.new("Highlight")
        highlight.Adornee = character
        highlight.FillColor = _G.highlightColor
        highlight.OutlineColor = _G.outlineColor
        highlight.FillTransparency = _G.fillTransparency
        highlight.OutlineTransparency = _G.outlineTransparency
        highlight.Parent = character
        return highlight
    end

    -- Function to update highlight colors
    local function updateHighlightColors(highlight, fillColor, outlineColor)
        local tweenInfo = TweenInfo.new(hoverTweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(highlight, tweenInfo, {
            FillColor = fillColor,
            OutlineColor = outlineColor
        })
        tween:Play()
    end

    -- Function to apply hover effect
    local function applyHoverEffect(character)
        if character and character ~= currentHover then
            if currentHover then
                -- Reset previous hover highlight
                local prevHighlight = currentHover:FindFirstChildOfClass("Highlight")
                if prevHighlight then
                    updateHighlightColors(prevHighlight, _G.highlightColor, _G.outlineColor)
                end
            end

            -- Apply new hover highlight
            local highlight = character:FindFirstChildOfClass("Highlight") or createHighlight(character)
            updateHighlightColors(highlight, hoverColor, hoverColor)
            currentHover = character
        end
    end

    -- Function to handle rainbow effect
    local function applyRainbowEffect()
        local colors = {
            Color3.fromRGB(255, 0, 0),   -- Red
            Color3.fromRGB(255, 127, 0), -- Orange
            Color3.fromRGB(255, 255, 0), -- Yellow
            Color3.fromRGB(0, 255, 0),   -- Green
            Color3.fromRGB(0, 255, 255), -- Cyan
            Color3.fromRGB(0, 0, 255),   -- Blue
            Color3.fromRGB(139, 0, 255), -- Purple
            Color3.fromRGB(255, 0, 255), -- Magenta
            Color3.fromRGB(255, 20, 147) -- Deep Pink
        }
        local index = 1

        while _G.rainbowColor and _G.highlightEnabled do
            local currentColor = colors[index]
            local nextColor = colors[index % #colors + 1]

            for t = 0, 1, _G.step / _G.transitionTime do
                if not _G.rainbowColor or not _G.highlightEnabled then
                    return
                end

                _G.highlightColor = currentColor:Lerp(nextColor, t)

                -- Update all highlights with new color
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= localPlayer then
                        local character = player.Character
                        if character and character ~= currentHover then
                            local highlight = character:FindFirstChildOfClass("Highlight") or createHighlight(character)
                            updateHighlightColors(highlight, _G.highlightColor, _G.outlineColor)
                        end
                    end
                end
                wait(_G.step)
            end

            index = index % #colors + 1
        end
    end

    -- Main loop for hover detection
    spawn(function()
        while _G.highlightEnabled do
            local target = mouse.Target
            if target and target.Parent and game.Players:GetPlayerFromCharacter(target.Parent) then
                applyHoverEffect(target.Parent)
            else
                currentHover = nil
            end
            wait(0.1)
        end

        -- Reset all highlights when disabled
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer then
                local character = player.Character
                if character then
                    local highlight = character:FindFirstChildOfClass("Highlight")
                    if highlight then
                        highlight:Destroy()
                    end
                end
            end
        end
    end)

    -- Start rainbow effect
    spawn(applyRainbowEffect)
end
